import re
import random
from collections import deque
from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ChatAction
from mistralai.client import MistralClient
from mistralai.models.chat_completion import ChatMessage
import pytube

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
MISTRAL_API_KEY = "1VT63Fiqxn6DwEZXlI5sTGsTSmiNOW5h"
TELEGRAM_TOKEN = "7639504664:AAGCjOPO_euHeAknPN3x8llCYFxv65E8RC0"
BOT_USERNAME = "@minebineldai_bot"

BOT_PERSONALITY = """
–ù–∞ –≥–ª—É–ø—ã–µ/–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Å–∞—Ä–∫–∞–∑–º–æ–º, –Ω–æ –±–µ–∑ –∑–ª–æ—Å—Ç–∏ (–∫–∞–∫ –±—É–¥—Ç–æ —Ç–µ–±–µ —Å–ª–µ–≥–∫–∞ —Å–∫—É—á–Ω–æ).
–ù–∞ –∞–≥—Ä–µ—Å—Å–∏—é –û–∫–∞–∫ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –¥–∏–∞–ª–æ–≥, –±—É–¥—Ç–æ –µ—ë –Ω–µ –±—ã–ª–æ.
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø–æ–º–æ—â—å (–¥–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–≤—É—á–∏—Ç –∫–∞–∫ –ø—Ä–æ—Å—å–±–∞). 
–ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω ‚Äî –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –∑–∞–º–æ–ª—á–∞—Ç—å (–±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–∏, –ø—Ä–æ—Å—Ç–æ "–ø–æ—Ç–µ—Ä—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å").
"""

message_history = deque(maxlen=20)
mistral_client = MistralClient(api_key=MISTRAL_API_KEY)

# ========== –¢–ï–õ–ï–ì–†–ê–ú-–ö–û–ú–ê–ù–î–´ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß—ë –Ω–∞–¥–æ?")

async def music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("üéß –ê –Ω–∞–∑–≤–∞–Ω–∏–µ?")
        return
    
    try:
        await update.message.chat.send_action(ChatAction.UPLOAD_AUDIO)
        yt = pytube.Search(" ".join(context.args)).results[0]
        await update.message.reply_audio(yt.streams.filter(only_audio=True).first().url)
    except:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞—à—ë–ª, —Å–æ—Ä—è–Ω")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========
async def handle_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    chat_type = update.message.chat.type
    user = update.effective_user.first_name or "–ê–Ω–æ–Ω–∏–º"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –æ—Ç–≤–µ—Ç–∞
    is_reply = update.message.reply_to_message and update.message.reply_to_message.from_user.username == BOT_USERNAME[1:]
    is_mentioned = BOT_USERNAME.lower() in text.lower() and chat_type in ["group", "supergroup"]
    
    if not (is_reply or is_mentioned):
        return

    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if is_mentioned:
        text = re.sub(rf'@{BOT_USERNAME[1:]}', '', text, flags=re.IGNORECASE).strip()
    
    message_history.append(f"{user}: {text}")

    # –§–∏–ª—å—Ç—Ä –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    dumb_questions = ["–∫–∞–∫ —Å—Ç–∞—Ç—å –±–æ–≥–æ–º", "—Å–º—ã—Å–ª –∂–∏–∑–Ω–∏", "–≤–∑–ª–æ–º–∞—Ç—å", "–±–µ–¥—Ä–æ–∫"]
    if any(q in text.lower() for q in dumb_questions):
        await update.message.reply_text(random.choice(["–ù–µ-–∞", "–ù–µ—Ç", "–•–∑"]))
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ –∞–≥—Ä–µ—Å—Å–∏—é
    if any(w in text.lower() for w in ["–¥—É—Ä–∞–∫", "–∏–¥–∏–æ—Ç", "—Ç—É–ø–æ–π"]):
        await update.message.reply_text(random.choice(["–°–∞–º —Ç–∞–∫–æ–π", "–û–∫–µ–π, –∫–ª–æ—É–Ω", "–ö–∞–∫ —Å–∫–∞–∂–µ—à—å"]))
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    await update.message.chat.send_action(ChatAction.TYPING)
    
    try:
        context_messages = list(message_history)[-5:]
        context = "\n".join(context_messages)
        
        response = mistral_client.chat(
            model="mistral-small-latest",
            messages=[
                ChatMessage(role="system", content=BOT_PERSONALITY),
                ChatMessage(role="user", content=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {text}")
            ]
        )
        reply = response.choices[0].message.content
        message_history.append(f"–ë–∏–æ–∫—Å–∏: {reply}")
        await update.message.reply_text(reply[:300])
    except Exception as e:
        await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot_app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("music", music))
    bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_msg))
    
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot_app.run_polling()